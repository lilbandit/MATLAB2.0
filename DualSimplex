format short;
clear all;
clc;

variables = { 'x1', 'x2', 'x3', 's1', 's2', 'soln'};
cost = [-2 0 -1 0 0 0];
info = [-1 -1 1; -1 2 -4];
b = [-5; -8];
s = eye(size(info,1));
A = [info s b];
% starting BFS
BV = [];
for j=1:size(s,2)
    for i = 1:size(A,2)
        if A(:,i) == s(:,j)
            BV = [BV i];
        end
    end
end
zjcj = cost(BV)*A - cost;
t = [zjcj;A];
simpTable = array2table(t);
simpTable.Properties.VariableNames(1:size(t,2)) = variables;
display(simpTable);
run = true
while run
    sol = A(:, end);
    if any(sol<0)
        fprintf('current BFS not feasible\n');
        [lv, p_row] = min(sol);
        fprintf('leaving var = %d \n', p_row);
        row = A(p_row,1:end-1);
        zj = zjcj(:, 1:end-1);
        ratio = [];
        for i= 1: size(row,2)
            if row(i)<0
                ratio = [ratio abs(zj(i)./row(i))];
            else
                ratio = [ratio inf];
            end
        end
        [p , p_col] = min(ratio);
        [p, p_col] = min(ratio);
        fprintf('entering var = %d \n', p_col);
        % update the BV
        BV(p_row) = p_col;
        display(variables(BV));
        %table for next iteration
        pvt_key = A(p_row,p_col);
        A(p_row,:) = A(p_row,:)./pvt_key;
        for i=1:size(A,1)
            if i~=p_row
                A(i,:) = A(i,:) - A(i,p_col).*A(p_row,:);
            end
        end
        zjcj = cost(BV)*A - cost;
        t = [zjcj;A];
        simpTable = array2table(t);
        simpTable.Properties.VariableNames(1:size(t,2)) = variables;
        display(simpTable);
    else
        fprintf('current BFS is feasible and optimal\n');
        break
    end
end
final_bfs = zeros(1,size(A,2));
final_bfs(BV) = A(:,end);
final_bfs(end) = sum(final_bfs.*cost);
simpTable = array2table(final_bfs);
        simpTable.Properties.VariableNames(1:size(t,2)) = variables;
        display(simpTable);
