//weighted sum
format short
clear all;
clc;

C1=[3 2 4;1 5 3];
m=size(C1,1);
C=sum(C1)./m;
%% Input Parameter
 M=10000;
 Cost=[C 0 0 -M 0]; %cost-end is soln = 0
 a=[2 4 1 1 0 0;3 5 4 0 1 -1];
 b=[8;15];
 A=[a b];
 BV=[4 6];
 data={'x1','x2','x3','s1','s2','A1','sol'};
 artifical_var=[5];

%% ZJCJ value

ZjCj=Cost(BV)*A-Cost;
ZCj=[ZjCj;A];
ST=array2table(ZCj);
ST.Properties.VariableNames(1:size(ZCj,2))=data

%% most minimum value
RUN=true;
while RUN
if any(ZjCj(1:end-1)<0); 
    fprintf('The current BFS is NOT optimal\n');
    fprintf('\n======The next iteration results=======\n');
    disp('OLD Basic variables (BV)=');
    disp(BV);
    
%% Finding the entering variable

    ZC=ZjCj(1:end-1);
    [Entering,pvt_col]=min(ZC);
    fprintf('The most negative element in Zj-Cj row is %d corresponding to the pivot column %d\n',Entering,pvt_col);
    fprintf('Entering variable is %d\n',pvt_col);

    %% Finding the leaving variable
    sol=A(:,end);
    column=A(:,pvt_col);

    if all(column<=0)
        error('LPP is unbounded. All the entries<=0 in column %d\n',pvt_col);
    else
        for i=1:size(column,1)
            if column(i)>0
                ratio(i)=sol(i)./column(i);
            else
                ratio(i)=Inf;
            end
        end
    %% Finding the minimum
        [MinRatio, pvt_row]=min(ratio);

        fprintf('Minimum Ratio corresponding to Pivot row is %d\n',MinRatio);
        fprintf('Leaving varible is %d \n', BV(pvt_row));
    end 
    BV(pvt_row)=pvt_col;
    disp('New basic variable (BV)=');
    disp(BV);

    %% Pivot key
    pvt_key=A(pvt_row,pvt_col);
    %% Update the table for next iteration
    A(pvt_row,:)=A(pvt_row,:)./pvt_key;
        for i=1:size(A,1)
            if i~=pvt_row
                A(i,:)=A(i,:)-A(i,pvt_col).*A(pvt_row,:);
            end
            ZjCj=ZjCj-ZjCj(pvt_col).*A(pvt_row,:);
        end

     %% For printing purpose
    ZCj=[ZjCj;A];
    Table=array2table(ZCj);
    Table.Properties.VariableNames(1:size(ZCj,2))=data


    BFS=zeros(1,size(A,2));
    BFS(BV)=A(:,end);
    BFS(end)=sum(BFS.*Cost);
    Optimal_BFS=array2table(BFS);
    Optimal_BFS.Properties.VariableNames(1:size(Optimal_BFS,2))=data
% 
else
    if any(BV==artifical_var(1))
          error('Infeasible solution');
    else
    fprintf('The table is optimal \n');
    end
    z=input(' Enter 0 for minimization and 1 for max \n');
   
    if z==0
        Obj_value=-ZjCj(end);
    else
        Obj_value=ZjCj(end);
    end
    fprintf('The final optimal value is %f \n',Obj_value);
    RUN=false;
end

end











// least_cost
format short
clear all
clc
cost=[2 10 4 5;6 12 8 11;3 9 5 7];
A=[12 25 20];
B=[25 10 15 5];
if sum(A)==sum(B)
    fprintf('Given Trasportation is Balanced\n');
else
    fprintf('Given Trasportation is Unbalanced\n');
    if sum(A)<sum(B)
        cost(end+1,:)=zeros(1,size(A,2));
        A(end+1)=sum(B)-sum(A);
    elseif sum(A)>sum(B)
        cost(:,end+1)=zeros(1,size(A,2));
        B(end+1)=sum(A)-sum(B);
    end
end
display(cost);
Icost=cost;
X=zeros(size(cost));
[m,n]=size(cost);
BFS=m+n-1;

for i= 1:BFS
    [p,q] = min(Icost);
    [u,j] = min(p);
    i = q(j);
    x = min(A(i),B(j));
    A(i)=A(i)-x;
    B(j)=B(j)-x;
    if A(i)==0
        Icost(i,:) = inf;
    else
       Icost(:,j) = inf;
    end
    X(i,j)=x;
end

fprintf('Initial Bfs\n');
IB=array2table(X);
disp(IB);
TotalBfs=length(nonzeros(X));
if TotalBfs==BFS
    fprintf('Solution is Non-Degenerate\n');
else
    fprintf('solution is Degenerate\n');
end
Initialcost=sum(sum(cost.*X));
fprintf('Initial BFS cost = %d\n',Initialcost);











//fibonnaci

clc
clear 

f = @(x) x*(x-2);
L = 0;  %%lower limit
R = 1.5; %%upper limit
n =6; %%number of iterations

%%Fibbonaci series
fibo = ones(1,n);

for  i=3:n+1
    fibo(i)=fibo(i-1) + fibo(i-2);
end

%%iteration starts
for k = 1:n
    ratio = fibo(n+1-k)/fibo(n+2-k);
    x2 = L + ratio * (R-L);
    x1 = L+R -x2;   
    fx1 = f(x1);
    fx2 = f(x2);
    %print the table
    fiboTable(k,:) = [ratio L R x1 x2 fx1 fx2];
    if fx1>fx2
        L = x1;
    elseif fx1<fx2
            R = x2;
    elseif fx1== fx2
        if min(abs(L), abs(x1))==L
            R = x2;
        else
            L = x1;
        end
    end
end
fibot = array2table(fiboTable);
variables = {'ratio', 'L', 'R', 'x1', 'x2', 'fx1', 'fx2'};
fibot.Properties.VariableNames(1:size(fiboTable,2)) = variables;
fibot

xopt = (L+R)/2;
fopt = f(xopt);
display(xopt);
display(fopt);

















// Dual Simples

format short;
clear all;
clc;

variables = { 'x1', 'x2', 'x3', 's1', 's2', 'soln'};
cost = [-2 0 -1 0 0 0];
info = [-1 -1 1; -1 2 -4];
b = [-5; -8];
s = eye(size(info,1));
A = [info s b];
% starting BFS
BV = [];
for j=1:size(s,2)
    for i = 1:size(A,2)
        if A(:,i) == s(:,j)
            BV = [BV i];
        end
    end
end
zjcj = cost(BV)*A - cost;
t = [zjcj;A];
simpTable = array2table(t);
simpTable.Properties.VariableNames(1:size(t,2)) = variables;
display(simpTable);
run = true
while run
    sol = A(:, end);
    if any(sol<0)
        fprintf('current BFS not feasible\n');
        [lv, p_row] = min(sol);
        fprintf('leaving var = %d \n', p_row);
        row = A(p_row,1:end-1);
        zj = zjcj(:, 1:end-1);
        ratio = [];
        for i= 1: size(row,2)
            if row(i)<0
                ratio = [ratio abs(zj(i)./row(i))];
            else
                ratio = [ratio inf];
            end
        end
        [p , p_col] = min(ratio);
        [p, p_col] = min(ratio);
        fprintf('entering var = %d \n', p_col);
        % update the BV
        BV(p_row) = p_col;
        display(variables(BV));
        %table for next iteration
        pvt_key = A(p_row,p_col);
        A(p_row,:) = A(p_row,:)./pvt_key;
        for i=1:size(A,1)
            if i~=p_row
                A(i,:) = A(i,:) - A(i,p_col).*A(p_row,:);
            end
        end
        zjcj = cost(BV)*A - cost;
        t = [zjcj;A];
        simpTable = array2table(t);
        simpTable.Properties.VariableNames(1:size(t,2)) = variables;
        display(simpTable);
    else
        fprintf('current BFS is feasible and optimal\n');
        break
    end
end
final_bfs = zeros(1,size(A,2));
final_bfs(BV) = A(:,end);
final_bfs(end) = sum(final_bfs.*cost);
simpTable = array2table(final_bfs);
        simpTable.Properties.VariableNames(1:size(t,2)) = variables;
        display(simpTable);
