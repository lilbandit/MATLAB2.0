format short
clear all;
clc;

C1=[3 2 4;1 5 3];
m=size(C1,1);
C=sum(C1)./m;
%% Input Parameter
 M=10000;
 Cost=[C 0 0 -M 0]; %cost-end is soln = 0
 a=[2 4 1 1 0 0;3 5 4 0 1 -1];
 b=[8;15];
 A=[a b];
 BV=[4 6];
 data={'x1','x2','x3','s1','s2','A1','sol'};
 artifical_var=[5];

%% ZJCJ value

ZjCj=Cost(BV)*A-Cost;
ZCj=[ZjCj;A];
ST=array2table(ZCj);
ST.Properties.VariableNames(1:size(ZCj,2))=data

%% most minimum value
RUN=true;
while RUN
if any(ZjCj(1:end-1)<0); 
    fprintf('The current BFS is NOT optimal\n');
    fprintf('\n======The next iteration results=======\n');
    disp('OLD Basic variables (BV)=');
    disp(BV);
    
%% Finding the entering variable

    ZC=ZjCj(1:end-1);
    [Entering,pvt_col]=min(ZC);
    fprintf('The most negative element in Zj-Cj row is %d corresponding to the pivot column %d\n',Entering,pvt_col);
    fprintf('Entering variable is %d\n',pvt_col);

    %% Finding the leaving variable
    sol=A(:,end);
    column=A(:,pvt_col);

    if all(column<=0)
        error('LPP is unbounded. All the entries<=0 in column %d\n',pvt_col);
    else
        for i=1:size(column,1)
            if column(i)>0
                ratio(i)=sol(i)./column(i);
            else
                ratio(i)=Inf;
            end
        end
    %% Finding the minimum
        [MinRatio, pvt_row]=min(ratio);

        fprintf('Minimum Ratio corresponding to Pivot row is %d\n',MinRatio);
        fprintf('Leaving varible is %d \n', BV(pvt_row));
    end 
    BV(pvt_row)=pvt_col;
    disp('New basic variable (BV)=');
    disp(BV);

    %% Pivot key
    pvt_key=A(pvt_row,pvt_col);
    %% Update the table for next iteration
    A(pvt_row,:)=A(pvt_row,:)./pvt_key;
        for i=1:size(A,1)
            if i~=pvt_row
                A(i,:)=A(i,:)-A(i,pvt_col).*A(pvt_row,:);
            end
            ZjCj=ZjCj-ZjCj(pvt_col).*A(pvt_row,:);
        end

     %% For printing purpose
    ZCj=[ZjCj;A];
    Table=array2table(ZCj);
    Table.Properties.VariableNames(1:size(ZCj,2))=data


    BFS=zeros(1,size(A,2));
    BFS(BV)=A(:,end);
    BFS(end)=sum(BFS.*Cost);
    Optimal_BFS=array2table(BFS);
    Optimal_BFS.Properties.VariableNames(1:size(Optimal_BFS,2))=data
% 
else
    if any(BV==artifical_var(1))
          error('Infeasible solution');
    else
    fprintf('The table is optimal \n');
    end
    z=input(' Enter 0 for minimization and 1 for max \n');
   
    if z==0
        Obj_value=-ZjCj(end);
    else
        Obj_value=ZjCj(end);
    end
    fprintf('The final optimal value is %f \n',Obj_value);
    RUN=false;
end

end
